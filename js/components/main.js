console.log(Date.now());
storageManager = new StorageManager();
let data = storageManager.loadHabits().map(obj => new Habit(false, obj)); // üõ†Ô∏è —Ñ–∏–∫—Å
console.log(data);
render = new Render();
function renderHabits() {
    let html = document.querySelector('.habits-container');
    html.innerHTML = '';
    let habits_list = '.habits-container';

    if (data.length > 0) {
        for (let i = 0; i < data.length; i++) {
            render.render(habits_list, data[i].render());
        }
    }
}
renderHabits();
let form = new CreateHabitForm();
let habit_form = '#habitForm';
render.render(habit_form, form.render());
form.attachEventListeners();



function downloadHabitsAsJson() {
    const habits = storageManager.loadHabits();
    const jsonString = JSON.stringify(habits.map(h => h.toJSON()), null, 2);

    const blob = new Blob([jsonString], { type: "application/json" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "habits.json";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    URL.revokeObjectURL(url);
    console.log("üìÅ JSON-—Ñ–∞–π–ª –ø—Ä–∏–≤—ã—á–µ–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.");
}

function importHabitsFromJson() {
    const fileInput = document.getElementById('importFile');
    const file = fileInput.files[0];

    if (!file) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.");
        return;
    }

    const reader = new FileReader();
    reader.onload = function (event) {
        try {
            const json = JSON.parse(event.target.result);

            if (!Array.isArray(json)) {
                throw new Error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –ø—Ä–∏–≤—ã—á–µ–∫.");
            }

            const valid = json.every(habit =>
                'id' in habit &&
                'name' in habit &&
                'unit' in habit &&
                'dailyGoal' in habit &&
                'total' in habit &&
                'logs' in habit
            );
            
            if (!valid) {
                throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Ñ–∞–π–ª–µ.");
            }
            
            // –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ daily, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            json.forEach(habit => {
                if (!('daily' in habit)) {
                    habit.daily = 0;
                }
            });
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Habit –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            const habits = json.map(data => new Habit(false, data));
            storageManager.saveHabits(habits);
            alert("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!");

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            const render = new Render();
            render.renderHabits();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:", error);
            alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: " + error.message);
        }
    };

    reader.readAsText(file);
}


